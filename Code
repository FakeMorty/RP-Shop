import asyncio
import sqlite3
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, InputMediaPhoto
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8468997703:AAEfT1VN4gBX6LtMt7bkHk4ctZ0stJy5t-E"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
MARKET_CHANNEL_ID = -1002558702431  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ —Ä—ã–Ω–∫–∞
ADMIN_IDS = [5272076117, 1014648750, 6667527307, 7790048968, 1566512661, 5753554084, 6050582147]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ItemStates(StatesGroup):
    waiting_for_image = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()
    waiting_for_player_name = State()
    waiting_for_initial_balance = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS players (
            user_id INTEGER PRIMARY KEY,
            player_name TEXT NOT NULL,
            balance INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS lots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seller_id INTEGER,
            item_name TEXT NOT NULL,
            item_description TEXT,
            price INTEGER NOT NULL,
            image_file_id TEXT,
            message_id INTEGER,
            is_sold BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (seller_id) REFERENCES players (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            from_user_id INTEGER,
            to_user_id INTEGER,
            amount INTEGER,
            transaction_type TEXT,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_player(user_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM players WHERE user_id = ?", (user_id,))
    player = cursor.fetchone()
    conn.close()
    return player

def add_player(user_id: int, player_name: str, initial_balance: int = 0):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO players (user_id, player_name, balance) VALUES (?, ?, ?)",
        (user_id, player_name, initial_balance)
    )
    conn.commit()
    conn.close()

def update_balance(user_id: int, amount: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE players SET balance = balance + ? WHERE user_id = ?",
        (amount, user_id)
    )
    conn.commit()
    conn.close()

def get_player_lots(user_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM lots WHERE seller_id = ? AND is_sold = FALSE",
        (user_id,)
    )
    lots = cursor.fetchall()
    conn.close()
    return lots

def create_lot(seller_id: int, item_name: str, item_description: str, price: int, image_file_id: str):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO lots (seller_id, item_name, item_description, price, image_file_id) VALUES (?, ?, ?, ?, ?)",
        (seller_id, item_name, item_description, price, image_file_id)
    )
    lot_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return lot_id

def get_lot(lot_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM lots WHERE id = ?", (lot_id,))
    lot = cursor.fetchone()
    conn.close()
    return lot

def mark_lot_sold(lot_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE lots SET is_sold = TRUE WHERE id = ?", (lot_id,))
    conn.commit()
    conn.close()

def delete_lot(lot_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM lots WHERE id = ?", (lot_id,))
    conn.commit()
    conn.close()

def add_transaction(from_user_id: int, to_user_id: int, amount: int, transaction_type: str, description: str):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO transactions (from_user_id, to_user_id, amount, transaction_type, description) VALUES (?, ?, ?, ?, ?)",
        (from_user_id, to_user_id, amount, transaction_type, description)
    )
    conn.commit()
    conn.close()

def update_lot_message_id(lot_id: int, message_id: int):
    conn = sqlite3.connect('rp_market.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE lots SET message_id = ? WHERE id = ?", (message_id, lot_id))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
def format_number(num: int) -> str:
    return f"{num:,}".replace(",", " ")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
        [InlineKeyboardButton(text="üõç –ú–æ–∏ –ª–æ—Ç—ã", callback_data="my_lots")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")],
    ])
    return keyboard

# –ê–¥–º–∏–Ω –º–µ–Ω—é
def get_admin_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="admin_add_player")],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_money")],
        [InlineKeyboardButton(text="üí∏ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_remove_money")],
        [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞", callback_data="admin_check_balance")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    player = get_player(message.from_user.id)
    
    if not player:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
        )
        return
    
    await message.answer(
        f"üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—ã–Ω–æ–∫ –í–µ—Å—Ç–µ—Ä–æ—Å–∞, {player[1]}!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_number(player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –∫–æ—à–µ–ª–µ–∫"
@dp.callback_query(F.data == "wallet")
async def show_wallet(callback: CallbackQuery):
    player = get_player(callback.from_user.id)
    if not player:
        await callback.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    await callback.message.edit_text(
        f"üí∞ –ö–æ—à–µ–ª–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {player[1]}\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: {format_number(player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
        f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {player[3][:10]}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ª–æ—Ç—ã"
@dp.callback_query(F.data == "my_lots")
async def show_my_lots(callback: CallbackQuery):
    lots = get_player_lots(callback.from_user.id)
    
    if not lots:
        await callback.message.edit_text(
            "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        return
    
    text = f"üõç –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã ({len(lots)}/5):\n\n"
    buttons = []
    
    for lot in lots:
        text += f"üì¶ {lot[2]} - {format_number(lot[4])} ü™ô\n"
        buttons.append([InlineKeyboardButton(
            text=f"‚ùå –°–Ω—è—Ç—å '{lot[2]}'", 
            callback_data=f"remove_lot_{lot[0]}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "add_item")
async def start_add_item(callback: CallbackQuery, state: FSMContext):
    player = get_player(callback.from_user.id)
    if not player:
        await callback.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    lots = get_player_lots(callback.from_user.id)
    if len(lots) >= 5:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ (5/5)\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π—Ç–µ –∏–ª–∏ —Å–Ω–∏–º–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        return
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    await state.set_state(ItemStates.waiting_for_image)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(StateFilter(ItemStates.waiting_for_image), F.photo)
async def process_item_image(message: Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(image_file_id=photo.file_id)
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ItemStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(StateFilter(ItemStates.waiting_for_name))
async def process_item_name(message: Message, state: FSMContext):
    await state.update_data(item_name=message.text)
    
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ItemStates.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(StateFilter(ItemStates.waiting_for_description))
async def process_item_description(message: Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö:")
    await state.set_state(ItemStates.waiting_for_price)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@dp.message(StateFilter(ItemStates.waiting_for_price))
async def process_item_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.replace(" ", ""))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
        return
    
    data = await state.get_data()
    player = get_player(message.from_user.id)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞
    lot_id = create_lot(
        message.from_user.id,
        data['item_name'],
        data['item_description'],
        price,
        data['image_file_id']
    )
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ —Ä—ã–Ω–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{lot_id}")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü", callback_data=f"seller_{message.from_user.id}")]
    ])
    
    market_message = await bot.send_photo(
        chat_id=MARKET_CHANNEL_ID,
        photo=data['image_file_id'],
        caption=f"üõç **{data['item_name']}**\n\n"
                f"üìã {data['item_description']}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {format_number(price)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {player[1]}",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ message_id –≤ –±–∞–∑–µ
    update_lot_message_id(lot_id, market_message.message_id)
    
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä '{data['item_name']}' –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!\n\n"
        f"üí∞ –¶–µ–Ω–∞: {format_number(price)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: CallbackQuery):
    lot_id = int(callback.data.split("_")[1])
    lot = get_lot(lot_id)
    
    if not lot or lot[7]:  # –ï—Å–ª–∏ –ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        return
    
    buyer = get_player(callback.from_user.id)
    if not buyer:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    if lot[1] == callback.from_user.id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã")
        return
    
    if buyer[2] < lot[4]:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
            f"–ù—É–∂–Ω–æ: {format_number(lot[4])} ü™ô\n"
            f"–£ –≤–∞—Å: {format_number(buyer[2])} ü™ô"
        )
        return
    
    seller = get_player(lot[1])
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    update_balance(callback.from_user.id, -lot[4])
    update_balance(lot[1], lot[4])
    
    # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    add_transaction(
        callback.from_user.id, lot[1], lot[4],
        "purchase", f"–ü–æ–∫—É–ø–∫–∞ '{lot[2]}'"
    )
    
    # –û—Ç–º–µ—Ç–∫–∞ –ª–æ—Ç–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ
    mark_lot_sold(lot_id)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    try:
        await bot.edit_message_caption(
            chat_id=MARKET_CHANNEL_ID,
            message_id=lot[6],
            caption=f"üõç **{lot[2]}** ‚úÖ **–ü–†–û–î–ê–ù–û**\n\n"
                   f"üìã {lot[3]}\n\n"
                   f"üí∞ –¶–µ–Ω–∞: {format_number(lot[4])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                   f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller[1]}\n"
                   f"üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer[1]}",
            parse_mode="Markdown"
        )
    except:
        pass
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–¥–µ–ª–∫–∏
    await bot.send_message(
        callback.from_user.id,
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
        f"üõç –¢–æ–≤–∞—Ä: {lot[2]}\n"
        f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_number(lot[4])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller[1]}"
    )
    
    await bot.send_message(
        lot[1],
        f"üéâ –í–∞—à —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω!\n\n"
        f"üõç –¢–æ–≤–∞—Ä: {lot[2]}\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {format_number(lot[4])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
        f"üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer[1]}"
    )
    
    await callback.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –ª–æ—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏
@dp.callback_query(F.data.startswith("remove_lot_"))
async def remove_lot(callback: CallbackQuery):
    lot_id = int(callback.data.split("_")[2])
    lot = get_lot(lot_id)
    
    if not lot or lot[1] != callback.from_user.id:
        await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    player = get_player(callback.from_user.id)
    penalty = int(lot[4] * 0.125)  # 12.5% —à—Ç—Ä–∞—Ñ
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
    if player[2] >= penalty:
        update_balance(callback.from_user.id, -penalty)
        add_transaction(
            callback.from_user.id, None, penalty,
            "penalty", f"–®—Ç—Ä–∞—Ñ –∑–∞ —Å–Ω—è—Ç–∏–µ '{lot[2]}'"
        )
        penalty_text = f"üí∏ –®—Ç—Ä–∞—Ñ {format_number(penalty)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å–ø–∏—Å–∞–Ω —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"
    else:
        penalty_text = f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —à—Ç—Ä–∞—Ñ–∞ ({format_number(penalty)} ü™ô)"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞
    delete_lot(lot_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    try:
        await bot.delete_message(chat_id=MARKET_CHANNEL_ID, message_id=lot[6])
    except:
        pass
    
    await callback.message.edit_text(
        f"‚úÖ –¢–æ–≤–∞—Ä '{lot[2]}' —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏\n\n"
        f"{penalty_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

# –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
@dp.callback_query(F.data == "admin_add_player")
async def admin_add_player(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)
    await state.update_data(action="add_player")

@dp.message(StateFilter(AdminStates.waiting_for_user_id))
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        
        data = await state.get_data()
        if data.get("action") == "add_player":
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
            await state.set_state(AdminStates.waiting_for_player_name)
        else:
            await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            await state.set_state(AdminStates.waiting_for_amount)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@dp.message(StateFilter(AdminStates.waiting_for_player_name))
async def process_player_name(message: Message, state: FSMContext):
    await state.update_data(player_name=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:")
    await state.set_state(AdminStates.waiting_for_initial_balance)

@dp.message(StateFilter(AdminStates.waiting_for_initial_balance))
async def process_initial_balance(message: Message, state: FSMContext):
    try:
        balance = int(message.text.replace(" ", ""))
        data = await state.get_data()
        
        add_player(data["user_id"], data["player_name"], balance)
        
        await message.answer(
            f"‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üë§ {data['player_name']}\n"
            f"üÜî {data['user_id']}\n"
            f"üí∞ {format_number(balance)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç",
            reply_markup=get_admin_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã...
@dp.callback_query(F.data == "admin_add_money")
async def admin_add_money(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)
    await state.update_data(action="add_money")

@dp.callback_query(F.data == "admin_remove_money")
async def admin_remove_money(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)
    await state.update_data(action="remove_money")

@dp.message(StateFilter(AdminStates.waiting_for_amount))
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text.replace(" ", ""))
        data = await state.get_data()
        user_id = data["user_id"]
        
        player = get_player(user_id)
        if not player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            await state.clear()
            return
        
        if data["action"] == "add_money":
            update_balance(user_id, amount)
            add_transaction(None, user_id, amount, "admin_add", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            action_text = "–ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞"
        else:  # remove_money
            update_balance(user_id, -amount)
            add_transaction(user_id, None, amount, "admin_remove", "–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            action_text = "—É–º–µ–Ω—å—à–µ–Ω –Ω–∞"
        
        new_player = get_player(user_id)
        
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {player[1]} {action_text} {format_number(amount)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_number(new_player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç",
            reply_markup=get_admin_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        try:
            if data["action"] == "add_money":
                await bot.send_message(
                    user_id,
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {format_number(amount)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(new_player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç"
                )
            else:
                await bot.send_message(
                    user_id,
                    f"üí∏ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {format_number(amount)} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_number(new_player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç"
                )
        except:
            pass
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    player = get_player(callback.from_user.id)
    if not player:
        await callback.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    await callback.message.edit_text(
        f"üè∞ –†—ã–Ω–æ–∫ –í–µ—Å—Ç–µ—Ä–æ—Å–∞\n\n"
        f"üë§ {player[1]}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_number(player[2])} —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

