# -*- coding: utf-8 -*-

import asyncio
import logging

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command, BaseFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

import database as db
from flask import Flask
from threading import Thread
import os 

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê (–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø) ---
BOT_TOKEN = "8468997703:AAGuhe11JhsTrn0XMb-kHHz1QcRq837IP0M"
OWNER_ID = 5272076117  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô ID
MARKET_CHANNEL_ID = -1002558702431  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê ID –ö–ê–ù–ê–õ–ê
CANCELLATION_FEE = 0.125
MAX_ITEMS_PER_USER = 5

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)


# --- –§–ò–õ–¨–¢–†–´ ---
class IsAdminFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return db.is_user_admin(message.from_user.id)

class IsNotBannedFilter(BaseFilter):
    async def __call__(self, event: types.Update) -> bool:
        user_id = event.from_user.id
        if db.is_user_banned(user_id):
            logging.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
            return False
        return True
# --- –ö–õ–ê–°–°–´ –î–õ–Ø CALLBACK'–û–í –ò –°–û–°–¢–û–Ø–ù–ò–ô ---
class RegistrationCallback(CallbackData, prefix="register"):
    action: str; user_id: int; username: str
class BuyItemCallback(CallbackData, prefix="buy"):
    item_id: int
class ManageItemCallback(CallbackData, prefix="manage"):
    action: str; item_id: int
class AddItemFSM(StatesGroup):
    waiting_for_name = State(); waiting_for_description = State(); waiting_for_photo = State(); waiting_for_price = State()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫"); builder.button(text="üõçÔ∏è –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"); builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)
def get_cancel_keyboard():
    builder = ReplyKeyboardBuilder(); builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)
def get_buy_button(item_id: int):
    builder = InlineKeyboardBuilder(); builder.button(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=BuyItemCallback(item_id=item_id).pack())
    return builder.as_markup()
# --- –ì–õ–ê–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–î–û–°–¢–£–ü–ù–´ –í–°–ï–ú) ---

@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await state.clear()
    if db.is_user_banned(message.from_user.id):
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    if db.user_exists(message.from_user.id):
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{message.from_user.full_name}</b>!", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n\n"
            "–Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ –∞–Ω–∫–µ—Ç."
        )

@dp.message(Command("help"))
async def handle_help(message: types.Message):
    text = "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    if db.is_user_admin(message.from_user.id):
        text += (
            "\n\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "<code>/give [ID] [—Å—É–º–º–∞]</code> - –≤—ã–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ.\n"
            "<code>/take [ID] [—Å—É–º–º–∞]</code> - –∑–∞–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ.\n"
            "<code>/ban [ID]</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n"
            "<code>/unban [ID]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
        )
    if message.from_user.id == OWNER_ID:
        text += (
            "\n\n<b>–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n"
            "<code>/addadmin [ID]</code> - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞.\n"
            "<code>/deladmin [ID]</code> - —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞."
        )
    await message.answer(text)

@dp.message(F.forward_from_chat)
async def handle_forwarded_anketa(message: types.Message):
    user = message.from_user
    if db.user_exists(user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=RegistrationCallback(action="approve", user_id=user.id, username=user.username or "user").pack())
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=RegistrationCallback(action="decline", user_id=user.id, username=user.username or "user").pack())
    builder.adjust(2)
    confirmation_request_text = (f"‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b> ‚ö†Ô∏è\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: <code>{user.id}</code>)")
    admin_ids_from_db = db.get_all_admins()
    if not admin_ids_from_db:
        logging.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    for admin_id in admin_ids_from_db:
        try:
            await bot.forward_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
            await bot.send_message(chat_id=admin_id, text=confirmation_request_text, reply_markup=builder.as_markup())
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    await message.answer("‚úÖ <b>–°–ø–∞—Å–∏–±–æ!</b>\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.callback_query(RegistrationCallback.filter(F.action == "approve"))
async def handle_approve_callback(query: types.CallbackQuery, callback_data: RegistrationCallback):
    admin_username = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    if not db.user_exists(callback_data.user_id):
        db.add_user(user_id=callback_data.user_id, username=callback_data.username)
        try:
            await bot.send_message(chat_id=callback_data.user_id, text="üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id}: {e}")
        await query.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–ª—è @{callback_data.username} <b>–û–î–û–ë–†–ï–ù–ê</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin_username}")
        await query.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    else:
        await query.message.edit_text(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –¥–ª—è @{callback_data.username} —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", show_alert=True)

@dp.callback_query(RegistrationCallback.filter(F.action == "decline"))
async def handle_decline_callback(query: types.CallbackQuery, callback_data: RegistrationCallback):
    admin_username = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    try:
        await bot.send_message(chat_id=callback_data.user_id, text="üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é...</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id}: {e}")
    await query.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –¥–ª—è @{callback_data.username} <b>–û–¢–ö–õ–û–ù–ï–ù–ê</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin_username}")
    await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
# --- –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ (–ó–ê–©–ò–©–ï–ù –§–ò–õ–¨–¢–†–û–ú –û–¢ –ë–ê–ù–ê) ---

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
dp.message.filter(IsNotBannedFilter())
dp.callback_query.filter(IsNotBannedFilter())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_dialog(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None: return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫")
async def handle_wallet_button(message: types.Message):
    user_balance = db.get_user_balance(message.from_user.id)
    await message.answer(f"<b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balance}</b> –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "üõçÔ∏è –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def handle_my_items_button(message: types.Message):
    user_items = db.get_user_items(message.from_user.id)
    if not user_items:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await message.answer("<b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>")
    for item in user_items:
        status = "‚úÖ –ü—Ä–æ–¥–∞–Ω" if item['is_sold'] else "‚è≥ –ù–∞ –ø—Ä–æ–¥–∞–∂–µ"
        text = f"<b>{item['name']}</b>\n–¶–µ–Ω–∞: {item['price']} –∑–æ–ª–æ—Ç—ã—Ö\n–°—Ç–∞—Ç—É—Å: {status}"
        if not item['is_sold']:
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ùå –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", callback_data=ManageItemCallback(action="delete", item_id=item['item_id']).pack())
            await message.answer(text, reply_markup=builder.as_markup())
        else:
            await message.answer(text)
        await asyncio.sleep(0.3)

@dp.callback_query(ManageItemCallback.filter(F.action == "delete"))
async def handle_delete_item_callback(query: types.CallbackQuery, callback_data: ManageItemCallback):
    item_id = callback_data.item_id
    user_id = query.from_user.id
    item_details = db.get_item_details(item_id)
    if not item_details or item_details['owner_id'] != user_id:
        await query.answer("‚ùóÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–µ –≤–∞–º.", show_alert=True)
        return
    if item_details['is_sold']:
        await query.answer("‚ùóÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω.", show_alert=True)
        return
    price = item_details['price']
    fee = int(price * CANCELLATION_FEE)
    db.update_user_balance(user_id, -fee)
    db.remove_item(item_id)
    try:
        await bot.delete_message(chat_id=MARKET_CHANNEL_ID, message_id=item_details['post_message_id'])
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –æ —Ç–æ–≤–∞—Ä–µ {item_id}: {e}")
    await query.message.edit_text(
        query.message.text + f"\n\n<b>‚ùå –¢–æ–≤–∞—Ä —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏.</b>\n–í–∑—ã—Å–∫–∞–Ω —à—Ç—Ä–∞—Ñ: <b>{fee}</b> –∑–æ–ª–æ—Ç—ã—Ö."
    )
    await query.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏.")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", ~F.state)
async def start_add_item(message: types.Message, state: FSMContext):
    active_items_count = db.count_active_user_items(message.from_user.id)
    if active_items_count >= MAX_ITEMS_PER_USER:
        await message.answer(f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!</b> –£ –≤–∞—Å —É–∂–µ {active_items_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_items_count}/{MAX_ITEMS_PER_USER})\n\n<b>–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.</b>", reply_markup=get_cancel_keyboard())
    await state.set_state(AddItemFSM.waiting_for_name)

@dp.message(AddItemFSM.waiting_for_name, F.text)
async def process_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("<b>–®–∞–≥ 2/4: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.</b>")
    await state.set_state(AddItemFSM.waiting_for_description)

@dp.message(AddItemFSM.waiting_for_description, F.text)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("<b>–®–∞–≥ 3/4: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.</b>")
    await state.set_state(AddItemFSM.waiting_for_photo)

@dp.message(AddItemFSM.waiting_for_photo, F.photo)
async def process_item_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("<b>–®–∞–≥ 4/4: –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö.</b>")
    await state.set_state(AddItemFSM.waiting_for_price)

@dp.message(AddItemFSM.waiting_for_photo)
async def process_item_photo_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")

@dp.message(AddItemFSM.waiting_for_price, F.text)
async def process_item_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    price = int(message.text)
    user_data = await state.get_data()
    item_caption = (f"üõç <b>{user_data['name']}</b>\n\nüìã {user_data['description']}\n\nüí∞ –¶–µ–Ω–∞: <b>{price}</b> –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {message.from_user.full_name}")
    try:
        item_id = db.add_item(owner_id=message.from_user.id, name=user_data['name'], description=user_data['description'], photo_id=user_data['photo'], price=price)
        sent_message = await bot.send_photo(chat_id=MARKET_CHANNEL_ID, photo=user_data['photo'], caption=item_caption, reply_markup=get_buy_button(item_id))
        db.add_post_message_id_to_item(item_id, sent_message.message_id)
        await message.answer("‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í–∞—à —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫.", reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª–µ {MARKET_CHANNEL_ID}: {e}")
        await message.answer("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.", reply_markup=get_main_menu_keyboard())
    await state.clear()

@dp.callback_query(BuyItemCallback.filter())
async def handle_buy_callback(query: types.CallbackQuery, callback_data: BuyItemCallback):
    buyer_id = query.from_user.id
    item_id = callback_data.item_id
    item = db.get_item_details(item_id)
    if not item:
        await query.answer("‚ùóÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    seller_id, price, is_sold, message_id = item['owner_id'], item['price'], item['is_sold'], item['post_message_id']
    if is_sold:
        await query.answer("‚ùóÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω.", show_alert=True)
        return
    if buyer_id == seller_id:
        await query.answer("‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.", show_alert=True)
        return
    buyer_balance = db.get_user_balance(buyer_id)
    if buyer_balance < price:
        await query.answer(f"‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {price}, –∞ —É –≤–∞—Å {buyer_balance}.", show_alert=True)
        return
    try:
        db.update_user_balance(buyer_id, -price)
        db.update_user_balance(seller_id, price)
        db.mark_item_as_sold(item_id)
        new_caption = query.message.caption + f"\n\n<b>‚úÖ –ü–†–û–î–ê–ù–û</b>\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {query.from_user.full_name}"
        await bot.edit_message_caption(chat_id=MARKET_CHANNEL_ID, message_id=message_id, caption=new_caption, reply_markup=None)
        await query.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
        await bot.send_message(buyer_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä! {price} –∑–æ–ª–æ—Ç—ã—Ö —Å–ø–∏—Å–∞–Ω–æ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.")
        await bot.send_message(seller_id, f"–í–∞—à —Ç–æ–≤–∞—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω! {price} –∑–æ–ª–æ—Ç—ã—Ö –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç.")
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await query.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
        await query.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
# --- –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

@dp.message(Command("give"), IsAdminFilter())
async def give_money_command(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 3: raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        user_id = int(args[1])
        amount = int(args[2])
        if not db.user_exists(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        db.update_user_balance(user_id, amount)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
        try:
            await bot.send_message(user_id, f"üí∞ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/give [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Å—É–º–º–∞]</code>")

@dp.message(Command("take"), IsAdminFilter())
async def take_money_command(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 3: raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        user_id = int(args[1])
        amount = int(args[2])
        if not db.user_exists(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        db.update_user_balance(user_id, -amount)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–ø–∏—Å–∞–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>.")
        try:
            await bot.send_message(user_id, f"üí∞ –£ –≤–∞—Å –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/take [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Å—É–º–º–∞]</code>")

@dp.message(Command("ban"), IsAdminFilter())
async def ban_user_command(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 2: raise ValueError
        user_id = int(args[1])
        if user_id == message.from_user.id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        if not db.user_exists(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        db.set_user_ban_status(user_id, is_banned=True)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(user_id, "<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.</b>")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–∞–Ω–µ: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/ban [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>")

@dp.message(Command("unban"), IsAdminFilter())
async def unban_user_command(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 2: raise ValueError
        user_id = int(args[1])
        if not db.user_exists(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        db.set_user_ban_status(user_id, is_banned=False)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(user_id, "<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.</b>")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/unban [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>")

@dp.message(Command("addadmin"), F.from_user.id == OWNER_ID)
async def add_admin_command(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
        if not db.user_exists(user_id):
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        db.set_admin(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin [ID]")

@dp.message(Command("deladmin"), F.from_user.id == OWNER_ID)
async def remove_admin_command(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
        if user_id == OWNER_ID:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
        if not db.user_exists(user_id):
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        db.remove_admin(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deladmin [ID]")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    db.init_db()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if not db.user_exists(OWNER_ID):
        db.add_user(OWNER_ID, "Owner")
    if not db.is_user_admin(OWNER_ID):
        db.set_admin(OWNER_ID)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# --- –°—Ç–∞—Ä—ã–π –∫–æ–¥ ---
# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

# --- –ù–û–í–´–ô –ö–û–î ---
app = Flask(__name__)

@app.route('/')
def index():
    return "I am alive!"

def run_flask():
  # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
  port = int(os.environ.get('PORT', 5000))
  app.run(host='0.0.0.0', port=port)

async def main_async():
    db.init_db()
    if not db.user_exists(OWNER_ID):
        db.add_user(OWNER_ID, "Owner")
    if not db.is_user_admin(OWNER_ID):
        db.set_admin(OWNER_ID)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")


