# -*- coding: utf-8 -*-
# –§–∞–π–ª: main.py (–ß–∞—Å—Ç—å 1/4)

import asyncio
import logging
from flask import Flask
from threading import Thread
import os
import math # –î–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü

# –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å EventLoop –≤ Windows
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command, BaseFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

import database as db

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê (–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø) ---
BOT_TOKEN = "8468997703:AAGuhe11JhsTrn0XMb-kHHz1QcRq837IP0M"
OWNER_ID = 5272076117  # ID –í–ª–∞–¥–µ–ª—å—Ü–∞
MARKET_CHANNEL_ID = -1002757279589  # ID –ö–∞–Ω–∞–ª–∞
CANCELLATION_FEE = 0.125
MAX_ITEMS_PER_USER = 5
ITEMS_PER_PAGE = 3 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Å–ø–∏—Å–∫–µ

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)


# --- –§–ò–õ–¨–¢–†–´ ---
class IsAdminFilter(BaseFilter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ò –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É –Ω–µ–≥–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    async def __call__(self, message: types.Message) -> bool:
        is_admin = db.is_user_admin(message.from_user.id)
        is_panel_active = db.is_admin_panel_active(message.from_user.id)
        return is_admin and is_panel_active

class IsNotBannedFilter(BaseFilter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    async def __call__(self, event: types.Update) -> bool:
        user = getattr(event, 'from_user', None)
        if user is None:
            return True
        
        user_id = user.id
        if db.is_user_banned(user_id):
            logging.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
            if isinstance(event, types.Message):
                 await event.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            elif isinstance(event, types.CallbackQuery):
                 await event.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
            return False
        return True

# --- –ö–õ–ê–°–°–´ –î–õ–Ø CALLBACK'–û–í –ò –°–û–°–¢–û–Ø–ù–ò–ô ---
class RegistrationCallback(CallbackData, prefix="register"):
    action: str
    user_id: int
    username: str
    chat_id: int
    msg_id: int

class BuyItemCallback(CallbackData, prefix="buy"):
    item_id: int

class ManageItemCallback(CallbackData, prefix="manage"):
    action: str
    item_id: int

class MyItemsPaginator(CallbackData, prefix="my_items"):
    action: str # 'page'
    page: int

class AddItemFSM(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    waiting_for_price = State()

class AdminLoginFSM(StatesGroup):
    waiting_for_password = State()

# -*- coding: utf-8 -*-
# –§–∞–π–ª: main.py (–ß–∞—Å—Ç—å 2/4)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫"); builder.button(text="üõçÔ∏è –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    builder.button(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"); builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

def get_admin_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ü–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º") 
    builder.button(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    builder.adjust(1, 1)
    return builder.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

def get_buy_button(item_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=BuyItemCallback(item_id=item_id).pack())
    return builder.as_markup()

# --- –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î ---
async def resolve_user_id(message: types.Message, target_identifier: str) -> int | None:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç user_id –ø–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∏–ª–∏ None.
    """
    target_user_id = None
    if target_identifier.isdigit():
        target_user_id = int(target_identifier)
    else:
        clean_username = target_identifier.lstrip('@')
        target_user_id = db.get_user_id_by_username(clean_username)

    if target_user_id is None or not db.user_exists(target_user_id):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ¬´{target_identifier}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return None
    
    return target_user_id


# --- –ì–õ–ê–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–î–û–°–¢–£–ü–ù–´ –í–°–ï–ú) ---
@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await state.clear()
    if db.is_user_banned(message.from_user.id):
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id, message.from_user.username or "user")
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n\n"
            "–Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ –∞–Ω–∫–µ—Ç."
        )
    else:
        db.update_username(message.from_user.id, message.from_user.username or "user")
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{message.from_user.full_name}</b>!", reply_markup=get_main_menu_keyboard())


@dp.message(Command("help"))
async def handle_help(message: types.Message):
    text = (
        "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n\n"
        "‚Ä¢ <b>–ú–æ–π –∫–æ—à–µ–ª–µ–∫</b> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
        "‚Ä¢ <b>–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.\n"
        "‚Ä¢ <b>–ú–æ—è –∞–Ω–∫–µ—Ç–∞</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.\n"
        "‚Ä¢ <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</b> - –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É."
    )
    if db.is_user_admin(message.from_user.id):
        text += "\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <code>/admin</code>."
        
    await message.answer(text)

@dp.message(F.forward_from_chat)
async def handle_forwarded_anketa(message: types.Message):
    user = message.from_user
    if not db.user_exists(user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    if not message.forward_from_chat or not message.forward_from_message_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
        return

    builder = InlineKeyboardBuilder()
    chat_id = message.forward_from_chat.id
    msg_id = message.forward_from_message_id
    
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=RegistrationCallback(action="approve", user_id=user.id, username=user.username or "user", chat_id=chat_id, msg_id=msg_id).pack())
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=RegistrationCallback(action="decline", user_id=user.id, username=user.username or "user", chat_id=chat_id, msg_id=msg_id).pack())
    builder.adjust(2)
    
    confirmation_request_text = (f"‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –∞–Ω–∫–µ—Ç—ã</b> ‚ö†Ô∏è\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: <code>{user.id}</code>)")
    admin_ids_from_db = db.get_all_admins()
    
    if not admin_ids_from_db:
        logging.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
        
    for admin_id in admin_ids_from_db:
        try:
            await bot.forward_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
            await bot.send_message(chat_id=admin_id, text=confirmation_request_text, reply_markup=builder.as_markup())
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
    await message.answer("‚úÖ <b>–°–ø–∞—Å–∏–±–æ!</b>\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–î–û –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–ò–õ–¨–¢–†–û–í) ---
@dp.callback_query(RegistrationCallback.filter(F.action == "approve"))
async def handle_approve_callback(query: types.CallbackQuery, callback_data: RegistrationCallback):
    admin_username = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    db.set_user_anketa(user_id=callback_data.user_id, chat_id=callback_data.chat_id, message_id=callback_data.msg_id)
    try:
        await bot.send_message(chat_id=callback_data.user_id, text="üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.", reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id}: {e}")
    
    await query.message.edit_text(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–ª—è @{callback_data.username} <b>–û–î–û–ë–†–ï–ù–ê</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin_username}")
    await query.answer("–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")


@dp.callback_query(RegistrationCallback.filter(F.action == "decline"))
async def handle_decline_callback(query: types.CallbackQuery, callback_data: RegistrationCallback):
    admin_username = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    try:
        await bot.send_message(chat_id=callback_data.user_id, text="üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é...</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –∞–Ω–∫–µ—Ç—ã –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id}: {e}")
    await query.message.edit_text(f"‚ùå –ê–Ω–∫–µ—Ç–∞ –¥–ª—è @{callback_data.username} <b>–û–¢–ö–õ–û–ù–ï–ù–ê</b>\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{admin_username}")
    await query.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# -*- coding: utf-8 -*-
# –§–∞–π–ª: main.py (–ß–∞—Å—Ç—å 3/4)

# --- –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ (–ó–ê–©–ò–©–ï–ù –§–ò–õ–¨–¢–†–û–ú –û–¢ –ë–ê–ù–ê) ---
dp.message.filter(IsNotBannedFilter())
dp.callback_query.filter(IsNotBannedFilter())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_dialog(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None: return
    await state.clear()
    if db.is_admin_panel_active(message.from_user.id):
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
    else:
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫")
async def handle_wallet_button(message: types.Message):
    user_balance = db.get_user_balance(message.from_user.id)
    await message.answer(f"<b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balance}</b> –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def handle_my_profile_button(message: types.Message):
    anketa_data = db.get_user_anketa(message.from_user.id)
    if anketa_data:
        chat_id, message_id = anketa_data
        try:
            await bot.forward_message(chat_id=message.chat.id, from_chat_id=chat_id, message_id=message_id)
        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è {message.from_user.id}: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

async def format_items_page(user_id: int, page: int = 1):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤."""
    offset = (page - 1) * ITEMS_PER_PAGE
    total_items = db.count_user_items(user_id)
    
    if total_items == 0:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", None

    user_items = db.get_user_items(user_id, limit=ITEMS_PER_PAGE, offset=offset)
    
    if not user_items and page > 1:
        return "–ó–¥–µ—Å—å –ø—É—Å—Ç–æ.", None

    text = "<b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    builder = InlineKeyboardBuilder()
    for item in user_items:
        status = "‚úÖ –ü—Ä–æ–¥–∞–Ω" if item['is_sold'] else "‚è≥ –ù–∞ –ø—Ä–æ–¥–∞–∂–µ"
        item_text = f"<b>{item['name']}</b>\n–¶–µ–Ω–∞: {item['price']} –∑–æ–ª–æ—Ç—ã—Ö\n–°—Ç–∞—Ç—É—Å: {status}\n"
        if not item['is_sold']:
            builder.button(text=f"‚ùå –°–Ω—è—Ç—å ¬´{item['name']}¬ª", callback_data=ManageItemCallback(action="delete", item_id=item['item_id']).pack())
        text += item_text + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    builder.adjust(1)
    
    total_pages = math.ceil(total_items / ITEMS_PER_PAGE)
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=MyItemsPaginator(action="page", page=page-1).pack()))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=MyItemsPaginator(action="page", page=page+1).pack()))
    
    builder.row(*nav_buttons)
    
    return text, builder.as_markup()

@dp.message(F.text == "üõçÔ∏è –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def handle_my_items_button(message: types.Message):
    text, reply_markup = await format_items_page(message.from_user.id, page=1)
    await message.answer(text, reply_markup=reply_markup)

@dp.callback_query(MyItemsPaginator.filter(F.action == "page"))
async def handle_my_items_page_switch(query: types.CallbackQuery, callback_data: MyItemsPaginator):
    text, reply_markup = await format_items_page(query.from_user.id, page=callback_data.page)
    try:
        await query.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await query.answer()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    await query.answer()

@dp.callback_query(ManageItemCallback.filter(F.action == "delete"))
async def handle_delete_item_callback(query: types.CallbackQuery, callback_data: ManageItemCallback):
    item_id = callback_data.item_id
    item_details = db.get_item_details(item_id)
    if not item_details or item_details['owner_id'] != query.from_user.id or item_details['is_sold']:
        await query.answer("‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Å–Ω—è—Ç—å", callback_data=ManageItemCallback(action="confirm_delete", item_id=item_id).pack())
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=ManageItemCallback(action="cancel_delete", item_id=item_id).pack())
    builder.adjust(2)
    
    fee = int(item_details['price'] * CANCELLATION_FEE)
    await query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Ç–æ–≤–∞—Ä ¬´<b>{item_details['name']}</b>¬ª —Å –ø—Ä–æ–¥–∞–∂–∏?\n\n"
        f"–ë—É–¥–µ—Ç –≤–∑—ã—Å–∫–∞–Ω —à—Ç—Ä–∞—Ñ: <b>{fee}</b> –∑–æ–ª–æ—Ç—ã—Ö.",
        reply_markup=builder.as_markup()
    )
    await query.answer()

@dp.callback_query(ManageItemCallback.filter(F.action == "cancel_delete"))
async def handle_cancel_delete_callback(query: types.CallbackQuery):
    text, reply_markup = await format_items_page(query.from_user.id, page=1)
    await query.message.edit_text(text, reply_markup=reply_markup)
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(ManageItemCallback.filter(F.action == "confirm_delete"))
async def handle_confirm_delete_item_callback(query: types.CallbackQuery, callback_data: ManageItemCallback):
    item_id = callback_data.item_id
    user_id = query.from_user.id
    item_details = db.get_item_details(item_id)

    if not item_details or item_details['owner_id'] != user_id or item_details['is_sold']:
        await query.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        text, reply_markup = await format_items_page(user_id, page=1)
        await query.message.edit_text(text, reply_markup=reply_markup)
        return

    price = item_details['price']
    fee = int(price * CANCELLATION_FEE)
    
    db.update_user_balance(user_id, -fee)
    db.remove_item(item_id)
    
    try:
        if item_details['post_message_id']:
            await bot.delete_message(chat_id=MARKET_CHANNEL_ID, message_id=item_details['post_message_id'])
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –æ —Ç–æ–≤–∞—Ä–µ {item_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
    
    await query.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
    
    text, reply_markup = await format_items_page(user_id, page=1)
    await query.message.edit_text(
        f"‚úÖ –¢–æ–≤–∞—Ä ¬´<b>{item_details['name']}</b>¬ª —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏.\n–í–∑—ã—Å–∫–∞–Ω —à—Ç—Ä–∞—Ñ: <b>{fee}</b> –∑–æ–ª–æ—Ç—ã—Ö.\n\n" + text,
        reply_markup=reply_markup
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", ~F.state)
async def start_add_item(message: types.Message, state: FSMContext):
    active_items_count = db.count_active_user_items(message.from_user.id)
    if active_items_count >= MAX_ITEMS_PER_USER:
        await message.answer(f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!</b> –£ –≤–∞—Å —É–∂–µ {active_items_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_items_count}/{MAX_ITEMS_PER_USER})\n\n<b>–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.</b>", reply_markup=get_cancel_keyboard())
    await state.set_state(AddItemFSM.waiting_for_name)

@dp.message(AddItemFSM.waiting_for_name, F.text)
async def process_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("<b>–®–∞–≥ 2/4: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.</b>")
    await state.set_state(AddItemFSM.waiting_for_description)

@dp.message(AddItemFSM.waiting_for_description, F.text)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("<b>–®–∞–≥ 3/4: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.</b>")
    await state.set_state(AddItemFSM.waiting_for_photo)

@dp.message(AddItemFSM.waiting_for_photo, F.photo)
async def process_item_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("<b>–®–∞–≥ 4/4: –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö.</b>")
    await state.set_state(AddItemFSM.waiting_for_price)

@dp.message(AddItemFSM.waiting_for_photo)
async def process_item_photo_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")

@dp.message(AddItemFSM.waiting_for_price, F.text)
async def process_item_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    price = int(message.text)
    user_data = await state.get_data()
    item_caption = (f"üõç <b>{user_data['name']}</b>\n\n"
                    f"üìã {user_data['description']}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: <b>{price}</b> –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{message.from_user.username or message.from_user.full_name}")
    try:
        sent_message = await bot.send_photo(chat_id=MARKET_CHANNEL_ID, photo=user_data['photo'], caption=item_caption)
        item_id = db.add_item(owner_id=message.from_user.id, name=user_data['name'], description=user_data['description'], photo_id=user_data['photo'], price=price, post_message_id=sent_message.message_id)
        await sent_message.edit_reply_markup(reply_markup=get_buy_button(item_id))
        await message.answer("‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í–∞—à —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫.", reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª–µ {MARKET_CHANNEL_ID}: {e}")
        await message.answer("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.", reply_markup=get_main_menu_keyboard())
    await state.clear()

@dp.callback_query(BuyItemCallback.filter())
async def handle_buy_callback(query: types.CallbackQuery, callback_data: BuyItemCallback):
    buyer_id = query.from_user.id
    item_id = callback_data.item_id
    
    if not db.user_exists(buyer_id):
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.", show_alert=True)
        return

    item = db.get_item_details(item_id)
    if not item:
        await query.answer("‚ùóÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
        return
        
    seller_id, price, is_sold = item['owner_id'], item['price'], item['is_sold']
    
    if is_sold:
        await query.answer("‚ùóÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω.", show_alert=True)
        return
    if buyer_id == seller_id:
        await query.answer("‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.", show_alert=True)
        return
        
    buyer_balance = db.get_user_balance(buyer_id)
    if buyer_balance < price:
        await query.answer(f"‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {price}, –∞ —É –≤–∞—Å {buyer_balance}.", show_alert=True)
        return
        
    try:
        db.update_user_balance(buyer_id, -price)
        db.update_user_balance(seller_id, price)
        db.mark_item_as_sold(item_id)
        
        new_caption = query.message.caption + f"\n\n<b>‚úÖ –ü–†–û–î–ê–ù–û</b>\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{query.from_user.username or query.from_user.full_name}"
        await bot.edit_message_caption(chat_id=MARKET_CHANNEL_ID, message_id=item['post_message_id'], caption=new_caption, reply_markup=None)
        
        await query.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
        await bot.send_message(buyer_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä ¬´{item['name']}¬ª! {price} –∑–æ–ª–æ—Ç—ã—Ö —Å–ø–∏—Å–∞–Ω–æ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.")
        await bot.send_message(seller_id, f"–í–∞—à —Ç–æ–≤–∞—Ä ¬´{item['name']}¬ª –±—ã–ª –∫—É–ø–ª–µ–Ω! {price} –∑–æ–ª–æ—Ç—ã—Ö –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç.")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): pass
        else: logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
        await query.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_id}: {e}")
        await query.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏.", show_alert=True)

# -*- coding: utf-8 -*-
# –§–∞–π–ª: main.py (–ß–∞—Å—Ç—å 4/4)

# --- –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ô –ë–õ–û–ö ---

@dp.message(Command("admin"))
async def admin_login_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not db.is_user_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if not db.has_admin_password(user_id):
        await message.answer("üîê –î–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏–ª –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/setpassword [–í–∞—à ID –∏–ª–∏ @username] [–ø–∞—Ä–æ–ª—å]</code>")
        return

    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminLoginFSM.waiting_for_password)

@dp.message(AdminLoginFSM.waiting_for_password, F.text)
async def process_admin_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")

    if db.check_admin_password(user_id, message.text):
        db.activate_admin_panel(user_id)
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_admin_keyboard())
        await state.clear()
    else:
        await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())

@dp.message(F.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", IsAdminFilter())
async def admin_logout(message: types.Message):
    db.deactivate_admin_panel(message.from_user.id)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "üìã –ü–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", IsAdminFilter())
async def admin_commands_memo(message: types.Message):
    admin_text = (
        "<b>üìã –ü–∞–º—è—Ç–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "<i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–∞–∫ ID, —Ç–∞–∫ –∏ @username.</i>\n\n"
        "<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        "<code>/give [—Ü–µ–ª—å] [—Å—É–º–º–∞]</code>\n"
        "‚îî –í—ã–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        "<code>/take [—Ü–µ–ª—å] [—Å—É–º–º–∞]</code>\n"
        "‚îî –ó–∞–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n"
        "<code>/ban [—Ü–µ–ª—å]</code>\n"
        "‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "<code>/unban [—Ü–µ–ª—å]</code>\n"
        "‚îî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "<code>/profile [—Ü–µ–ª—å]</code>\n"
        "‚îî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç—É—Å, –∞–Ω–∫–µ—Ç—É)."
    )
    
    if message.from_user.id == OWNER_ID:
        admin_text += (
            "\n\n"
            "------------------------------------\n"
            "<b>üëë –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n\n"
            "<code>/addadmin [—Ü–µ–ª—å]</code>\n"
            "‚îî –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º.\n\n"
            "<code>/deladmin [—Ü–µ–ª—å]</code>\n"
            "‚îî –°–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∞.\n\n"
            "<code>/setpassword [—Ü–µ–ª—å] [–ø–∞—Ä–æ–ª—å]</code>\n"
            "‚îî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω—É."
        )
    await message.answer(admin_text)

@dp.message(Command("give"), IsAdminFilter())
async def give_money_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) != 3: raise ValueError
        
        target_identifier = args[1]
        amount = int(args[2])

        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        db.update_user_balance(user_id, amount)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
        try:
            await bot.send_message(user_id, f"üí∞ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/give [ID –∏–ª–∏ @username] [—Å—É–º–º–∞]</code>")

@dp.message(Command("take"), IsAdminFilter())
async def take_money_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) != 3: raise ValueError
        
        target_identifier = args[1]
        amount = int(args[2])

        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        db.update_user_balance(user_id, -amount)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–ø–∏—Å–∞–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>.")
        try:
            await bot.send_message(user_id, f"üí∞ –£ –≤–∞—Å –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ <b>{amount}</b> –∑–æ–ª–æ—Ç—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/take [ID –∏–ª–∏ @username] [—Å—É–º–º–∞]</code>")

@dp.message(Command("ban"), IsAdminFilter())
async def ban_user_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2: raise ValueError
        
        target_identifier = args[1]
        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return

        if user_id == message.from_user.id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
            
        db.set_user_ban_status(user_id, is_banned=True)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(user_id, "<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.</b>")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–∞–Ω–µ: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/ban [ID –∏–ª–∏ @username]</code>")

@dp.message(Command("unban"), IsAdminFilter())
async def unban_user_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2: raise ValueError
        
        target_identifier = args[1]
        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return
            
        db.set_user_ban_status(user_id, is_banned=False)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await bot.send_message(user_id, "<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.</b>")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/unban [ID –∏–ª–∏ @username]</code>")

@dp.message(Command("profile"), IsAdminFilter())
async def admin_view_profile(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2: raise ValueError
            
        target_identifier = args[1]
        target_user_id = await resolve_user_id(message, target_identifier)
        if target_user_id is None: return

        user_data = db.get_user_full_profile(target_user_id)

        status_ban = "üö´ <b>–î–ê</b>" if user_data['is_banned'] else "‚úÖ –ù–µ—Ç"
        status_admin = "üëë <b>–î–ê</b>" if user_data['is_admin'] else "‚ùå –ù–µ—Ç"
        
        profile_text = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']} (<code>{target_user_id}</code>)</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data['balance']}</b> –∑–æ–ª–æ—Ç—ã—Ö\n"
            f"üëë –ê–¥–º–∏–Ω: {status_admin}\n"
            f"‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {status_ban}"
        )
        await message.answer(profile_text)

        if user_data['anketa_chat_id']:
            try:
                await bot.forward_message(
                    chat_id=message.chat.id,
                    from_chat_id=user_data['anketa_chat_id'],
                    message_id=user_data['anketa_message_id']
                )
            except Exception as e:
                await message.answer("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–Ω–∫–µ—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞).</i>")
        else:
            await message.answer("<i>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞.</i>")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/profile [ID –∏–ª–∏ @username]</code>")

# --- –ö–û–ú–ê–ù–î–´ –í–õ–ê–î–ï–õ–¨–¶–ê ---
@dp.message(Command("addadmin"), F.from_user.id == OWNER_ID)
async def add_admin_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2: raise ValueError
        
        target_identifier = args[1]
        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return
            
        db.set_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–º—É –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π <code>/setpassword</code>.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/addadmin [ID –∏–ª–∏ @username]</code>")

@dp.message(Command("deladmin"), F.from_user.id == OWNER_ID)
async def remove_admin_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) != 2: raise ValueError
        
        target_identifier = args[1]
        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return

        if user_id == OWNER_ID:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
            
        db.remove_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/deladmin [ID –∏–ª–∏ @username]</code>")

@dp.message(Command("setpassword"), F.from_user.id == OWNER_ID)
async def set_admin_password_command(message: types.Message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) != 3: raise ValueError
        
        target_identifier = args[1]
        password = args[2]
        
        user_id = await resolve_user_id(message, target_identifier)
        if user_id is None: return

        if not db.is_user_admin(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ.")
            return
            
        db.set_admin_password(user_id, password)
        await message.answer(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/setpassword [ID –∏–ª–∏ @username] [–ø–∞—Ä–æ–ª—å]</code>")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
app = Flask(__name__)

@app.route('/')
def index():
    return "I am alive!"

def run_flask():
  port = int(os.environ.get('PORT', 5000))
  app.run(host='0.0.0.0', port=port)

async def main_async():
    db.init_db()
    if not db.user_exists(OWNER_ID):
        db.add_user(OWNER_ID, "Owner")
    if not db.is_user_admin(OWNER_ID):
        db.set_admin(OWNER_ID)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    